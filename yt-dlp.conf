# Telegram bots aren't allowed to send videos larger than 50MB.
# This flag doesn't seem to work, but it doesn't hurt.
--max-filesize 50M

# Use --format to try to create the best mp4 file under 50MB.
# There's no way to ask for the best audio+best video under a *total* size,
# so we iterate through a few combinations of audio & video max sizes.
# Failing that, we get the best combined file under 50MB, or the best gif.
# At each step, we fallback to filesize_approx if filesize is not available.
# Since some formats don't provide sizes, as a last resort we remove the size limits.
--format (bv*[filesize<46M]/bv*[filesize_approx<46M])+(ba[filesize<4M]/ba[filesize_approx<4M])/(bv[filesize<42M]/bv[filesize_approx<42M])+(ba[filesize<8M]/ba[filesize_approx<8M])/(bv[filesize<34M]/bv[filesize_approx<34M])+(ba[filesize<16M]/ba[filesize_approx<16M])/(bv[filesize<25M]/bv[filesize_approx<25M])+(ba[filesize<25M]/ba[filesize_approx<25M]/ba[abr<150])/(b[filesize<50M]/b[filesize_approx<50M])/([ext=gif][filesize<50M]/[ext=gif][filesize_approx<50M])/bv*+ba/b/bv/ba

# if the best video file also has audio, don't mux in an extra audio track
--no-video-multistreams

# Make sure the output is mp4, since that's what telegram supports
--merge-output-format mp4
--recode-video mp4

# Cache the video files in the working directory so that they persist and are
# not downloaded again when requested again.
--paths temp:/tmp
--paths home:./videos

# Use a filename that is sensible for users but also unique. Including the
# format is in case we in future want a different format.
--output %(extractor)s/%(title)s-[%(id)s].%(format_id)s.%(ext)s --restrict-filenames

# The only thing in stdout is the info JSON, so we can parse it instead of 
# reading it from a file. implies --simulate, so we revert with --no-simulate
--dump-json
--no-simulate

# we stand against fascism and intentionally don't support X
--use-extractors all,-twitter